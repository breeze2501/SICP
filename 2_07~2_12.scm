(define (make-interval a b) (cons a b))
(define (lower-bound interval) (car interval))
(define (upper-bound interval) (cdr interval))

(define (add-interval x y)
    (make-interval (+ (lower-bound x) (lower-bound y))
                   (+ (upper-bound x) (upper-bound y))
    )
)

(define (sub-interval x y)
    (make-interval (- (lower-bound x) (upper-bound y))
                   (- (upper-bound x) (lower-bound y))
    )
)

(define (mul-interval x y)
    (let (
            (p1 (* (lower-bound x) (lower-bound y))) 
            (p2 (* (lower-bound x) (upper-bound y))) 
            (p3 (* (upper-bound x) (lower-bound y))) 
            (p4 (* (upper-bound x) (upper-bound y))) 
         )
        (make-interval (min p1 p2 p3 p4) (max p1 p2 p3 p4))
    )
)

(define (all+ x) (and (> (lower-bound x) 0) (> (upper-bound x) 0)))
(define (all- x) (and (< (lower-bound x) 0) (< (upper-bound x) 0)))
(define (notall x) (and (not (all+ x)) (not (all- x))))


(define (mul-interval x y)
    (let (
            (p1 (* (lower-bound x) (lower-bound y))) 
            (p2 (* (lower-bound x) (upper-bound y))) 
            (p3 (* (upper-bound x) (lower-bound y))) 
            (p4 (* (upper-bound x) (upper-bound y))) 
         )
        (make-interval (min p1 p2 p3 p4) (max p1 p2 p3 p4))
    )
)

(define (mul-interval x y)
    (cond ((and (all+ x) (all+ y)) (make-interval (* (lower-bound x) (lower-bound y))
                                                  (* (upper-bound x) (upper-bound y))))
          ((and (all+ x) (all- y)) (make-interval (* (upper-bound x) (lower-bound y))
                                                  (* (lower-bound x) (upper-bound y))))
          ((and (all- x) (all+ y)) (mul-interval y x))
          ((and (all+ x) (notall y)) (make-interval (* (upper-bound x) (lower-bound y))
                                                    (* (upper-bound x) (upper-bound y))))
          ((and (notall x) (all+ y)) (mul-interval y x))
          ((and (all- x) (all- y)) (make-interval (* (lower-bound x) (lower-bound y))
                                                  (* (upper-bound x) (upper-bound y))))
          ((and (all- x) (notall y)) (make-interval (* (lower-bound x) (upper-bound y))
                                                    (* (lower-bound x) (lower-bound y))))
          ((and (notall x) (all- y)) (mul-interval y x))
          ((and (notall x) (notall y)) (make-interval (* (lower-bound x) (lower-bound y))
                                                      (* (upper-bound x) (upper-bound y))))
    )
)

(define (div-interval x y)
    (if (< (* (upper-bound y) (lower-bound y)) 0)
        (error "Can not devide an interval contain 0" y)
        (mul-interval x (make-interval (/ 1.0 (upper-bound y)) 
                                       (/ 1.0 (lower-bound y))
                        )
        )
    )
)

(define (length x) (/ (- (upper-bound x) (lower-bound x)) 2))

(define a (make-interval 1.0 2.0))
(define b (make-interval -1.0 4.0))
(define c (sub-interval a b))

(length a)
(length b)
(length (mul-interval a b))
(length (div-interval a b))

(define (make-center-percent a x)
    (let ((one (- a (* a x)))
          (two (+ a (* a x))))
         (make-interval (min one two) (max one two))))

(define (center x) (/ (+ (upper-bound x) (lower-bound x)) 2))
(define (percent x) (/ (- (upper-bound x) (center x)) (center x)))

(define a (make-center-percent 10.0 0.1))
a
(center a)
(percent a)